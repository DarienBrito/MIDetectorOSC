TITLE:: MIDetectorOSC guide/overview
summary:: Easy to use classes for sending musical information to other applications via OSC messages.
categories:: Convenience, Musical Information, OSC
related:: Classes/Amplitude, Classes/Pitch, Classes/Tarini, Classes/Onsets, Classes/FFTSubbandPower

DESCRIPTION:: Easy to use classes for sending musical information to other applications via OSC messages. Fill me more



2013 -- Benjamin Sanchez Lengeling

Thanks also to:
Thomas Sanchez Lengeling

EXAMPLES::

CODE::
s.boot;

// Here we present 3 ways of instanciating a MIDetectorManager
// 1) Here we use all the arguments
(
var types,tags,nChannel,msgRate,channel;
// net adress to send OSC Messages
~net = NetAddr("127.0.0.1",12000);
// How fast do you want the messages?
msgRate=30;
// Channel to listen?
channel=0;
//Tagging variable
tags=0;
//Detector to use
types=["Amp","Pitch","Onset"];
// create the detector manager
MIDetectorManager.new(nil,types,msgRate,~net,channel,tags);
)
// 2) Olny passing the net adress
(
var types;
// net adress to send OSC Messages
~net = NetAddr("127.0.0.1",32000);
//Detector to use
types=["Pitch"];
a=MIDetectorManager.new(types:types,net:~net);
)
// 3) Using all the default values
(
a=MIDetectorManager.new();
a.addDetector("Pitch");
a.addDetector("Onset");
a.addDetector("Amp");
)

//Try it out with this sound
x={Decay2.ar(Impulse.ar(2),0.01,0.5)*SinOsc.ar(LFNoise0.kr(2).range(20,1500))}.play
//Kill it!
x.free

::
