TITLE:: MIDetectorOSC guide/overview
summary:: Easy to use classes for sending musical information to other applications via OSC messages.
categories:: Convenience, Musical Information, OSC
related:: Classes/Amplitude, Classes/Pitch, Classes/Tarini, Classes/Onsets, Classes/FFTSubbandPower

DESCRIPTION:: Easy to use classes for sending musical information to other applications via OSC messages. Fill me more



2013 -- Benjamin Sanchez Lengeling

Thanks also to:
Thomas Sanchez Lengeling

EXAMPLES::

CODE::
s.boot;

// First run this code
(
var types,tags,nChannel,msgRate,channels;
// net adress to send OSC Messages
~net = NetAddr("127.0.0.1",32000);
// How fast do you want the messages?
msgRate=30;
// Channel to listen?
channels=[0,1];
//Tagging variable
tags=[0,1];
//Detector to use
types=["Amp","Pitch","Onset"];

// create the detector manager
MIDetectorManager.new(nil,types,msgRate,~net,channels,tags);
)

//Try it out with this sound
x={Decay2.ar(Impulse.ar(2),0.01,0.5)*SinOsc.ar(LFNoise0.kr(2).range(20,1500))}.play
//Kill it!
x.free

::
